# -*- coding: utf-8 -*-
"""CSET340-LAB2(E22CSEU0223)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-uijX9MBT9XeoVvmejD-LQ_uoqRHqCDg
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/content/SAMPLE.jpg"  # Update with your image path
image = cv2.imread(image_path)
if image is None:
    raise FileNotFoundError("Image not found. Please check the path.")

def display_images(title, original, transformed):
    plt.figure(figsize=(10, 5))

    # Display original image
    plt.subplot(1, 2, 1)
    plt.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
    plt.title("Original Image")
    plt.axis("off")

    # Display transformed image without converting to grayscale
    plt.subplot(1, 2, 2)
    plt.imshow(cv2.cvtColor(transformed, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis("off")

    plt.show()

# ---- IMAGE RESIZING ----
resized_linear = cv2.resize(image, (128, 128), interpolation=cv2.INTER_LINEAR)
resized_nearest = cv2.resize(image, (128, 128), interpolation=cv2.INTER_NEAREST)
resized_cubic = cv2.resize(image, (128, 128), interpolation=cv2.INTER_CUBIC)

display_images("Resized - Linear Interpolation", image, resized_linear)
display_images("Resized - Nearest Neighbors", image, resized_nearest)
display_images("Resized - Polynomial (Cubic) Interpolation", image, resized_cubic)

# ---- IMAGE BLURRING ----
box_blur = cv2.blur(image, (15, 15))
gaussian_blur = cv2.GaussianBlur(image, (15, 15), 0)
adaptive_blur = cv2.bilateralFilter(image, 15, 150, 150)

display_images("Box Blurring", image, box_blur)
display_images("Gaussian Blurring", image, gaussian_blur)
display_images("Adaptive Blurring", image, adaptive_blur)
